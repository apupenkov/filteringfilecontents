package ru.shiftcft.unit;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.provider.Arguments;
import ru.shiftcft.app.statistic.StatisticService;
import ru.shiftcft.data.Basket;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

import static java.math.BigDecimal.ONE;
import static java.math.BigDecimal.ZERO;
import static java.math.BigDecimal.valueOf;
import static java.math.BigInteger.*;

class StatisticsUnitTestsConfig {

    private Basket basket;

    @BeforeEach
    void basketInit() {
        basket = new Basket();
    }

    StatisticService getStatServiceByDecs(List<BigDecimal> ints) {
        basket.getDoubles().addAll(ints);
        return new StatisticService(basket);
    }

    StatisticService getStatServiceByStrings(List<String> ints) {
        basket.getStrings().addAll(ints);
        return new StatisticService(basket);
    }

    StatisticService getStatServiceByInts(List<BigInteger> ints) {
        basket.getInts().addAll(ints);
        return new StatisticService(basket);
    }

    static Stream<Arguments> max() {
        return Stream.of(
                Arguments.of(Arrays.asList(BigInteger.ONE,
                        new BigInteger("9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999")),
                        new BigInteger("9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999")),
                Arguments.of(Arrays.asList(BigInteger.ZERO, BigInteger.ZERO), BigInteger.ZERO),
                Arguments.of(Arrays.asList(BigInteger.ZERO, BigInteger.ONE), BigInteger.ONE)
        );
    }

    static Stream<Arguments> min() {
        return Stream.of(
                Arguments.of(Arrays.asList(BigInteger.ONE, BigInteger.valueOf(3)), BigInteger.ONE),
                Arguments.of(Arrays.asList(BigInteger.ZERO, BigInteger.ZERO), BigInteger.ZERO),
                Arguments.of(Arrays.asList(BigInteger.ZERO, BigInteger.ONE, TWO), BigInteger.ZERO)
        );
    }

    static Stream<Arguments> avg() {
        return Stream.of(
                Arguments.of(Arrays.asList(
                        new BigInteger("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"),
                        new BigInteger("222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"),
                        new BigInteger("666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666")),
                new BigInteger("333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333")),
                Arguments.of(Arrays.asList(BigInteger.ZERO, BigInteger.ZERO), BigInteger.ZERO),
                Arguments.of(Arrays.asList(
                        new BigInteger("-111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"),
                        new BigInteger("-666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666"),
                        new BigInteger("-222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222")),
                        new BigInteger("-333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"))
        );
    }

    static Stream<Arguments> sum() {
        return Stream.of(
                Arguments.of(Arrays.asList(
                        new BigInteger("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"),
                        new BigInteger("2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"),
                        new BigInteger("6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666")),
                        new BigInteger("9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999")),
                Arguments.of(Arrays.asList(BigInteger.ZERO, BigInteger.ZERO), BigInteger.ZERO),
                Arguments.of(Arrays.asList(BigInteger.ZERO, BigInteger.ONE, TWO), BigInteger.valueOf(3))
        );
    }

    static Stream<Arguments> maxDec() {
        return Stream.of(
                Arguments.of(Arrays.asList(valueOf(0.0),
                        new BigDecimal("999999999999999999999999999999999999999999999999999999999999999999999999999999999999.9999999999999999")),
                        new BigDecimal("999999999999999999999999999999999999999999999999999999999999999999999999999999999999.9999999999999999")),
                Arguments.of(Arrays.asList(valueOf(0.0), valueOf(0.0)), valueOf(0.0))
        );
    }

    static Stream<Arguments> minDec() {
        return Stream.of(
                Arguments.of(Arrays.asList(valueOf(0.0),
                        new BigDecimal("999999999999999999999999999999999999999999999999999999999999999999999999999999999999.999999")),
                        valueOf(0.0)),
                Arguments.of(Arrays.asList(valueOf(0.0), valueOf(0.0)), valueOf(0.0))
        );
    }

    static Stream<Arguments> avgDec() {
        return Stream.of(
                Arguments.of(Arrays.asList(
                        new BigDecimal("222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222.222222222222222222222"),
                        new BigDecimal("666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666.666666666666666666666")),
                        new BigDecimal("444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444.444444444444444444444")),
                Arguments.of(Arrays.asList(valueOf(0.0), valueOf(0.0)), valueOf(0.0)),
                Arguments.of(Arrays.asList(
                        new BigDecimal("-222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222.222222222222222222222"),
                        new BigDecimal("-666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666.666666666666666666666")),
                        new BigDecimal("-444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444.444444444444444444444"))
                );
    }

    static Stream<Arguments> sumDec() {
        return Stream.of(
                Arguments.of(Arrays.asList(
                        new BigDecimal("1111111111111111111111111111111111111111111111111111111111111111111111111111.111111111111111111111111"),
                        new BigDecimal("2222222222222222222222222222222222222222222222222222222222222222222222222222.222222222222222222222222"),
                        new BigDecimal("6666666666666666666666666666666666666666666666666666666666666666666666666666.666666666666666666666666")),
                        new BigDecimal("9999999999999999999999999999999999999999999999999999999999999999999999999999.999999999999999999999999")),
                Arguments.of(Arrays.asList(valueOf(0.0), valueOf(0.0)), valueOf(0.0)),
                Arguments.of(Arrays.asList(
                        new BigDecimal("-222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222.222222222222222222222"),
                        new BigDecimal("-444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444.444444444444444444444")),
                        new BigDecimal("-666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666.666666666666666666666"))
        );
    }

    static Stream<Arguments> maxLengthStr() {
        return Stream.of(Arguments.of(Arrays.asList(" ", "sdfdsf"), "sdfdsf"));
    }

    static Stream<Arguments> minLengthStr() {
        return Stream.of(Arguments.of(Arrays.asList(" ", "sdfdsf"), " "));
    }
}
